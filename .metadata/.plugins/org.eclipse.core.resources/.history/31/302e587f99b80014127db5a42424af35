package boltzmannHomework;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;

/**
 * @author Peter Dong
 * A whole bunch of Particles in a box with rigid walls
 */
public class ParticleContainer {

	private Vector3 size;
	private List<Projectile> particles = new ArrayList<Projectile>();
	
	/**
	 * @param xSize The size of the box in the x direction
	 * @param ySize The size of the box in the y direction
	 * @param zSize The size of the box in the z direction
	 */
	public ParticleContainer(double xSize, double ySize, double zSize) {
		size = new Vector3(xSize, ySize, zSize);
	}
	
	public double getXSize() {
		return size.getX();
	}

	public double getYSize() {
		return size.getY();
	}
	
	public double getZSize() {
		return size.getZ();
	}
	
	/**
	 * @param part The Particle to add to the container
	 */
	public void addParticle(Projectile part) {
		particles.add(part);
	}
	
	/**
	 * @param generator The RandomGenerator used to create the random distribution
	 * @param number The number of particles to create
	 */
	public void addRandomParticles(RandomGenerator generator, int number) {
		for (int i = 0; i < number; ++i) {
			addParticle(generator.getNextProjectile());
		}
	}
	
	public List<Projectile> getParticles() {
		return particles;
	}
	
	/**
	 * This advances all the particles by one time step
	 * @param deltaTime The amount of time to advance the particle collection by
	 */
	public void advanceParticles(double deltaTime) {
		for (Projectile proj : particles) {
			proj.update(deltaTime);
			checkParticle(proj);
		}
	}
	
	private void checkParticle(Projectile particle) {
		if (particle.getPosition().getX() < 0 || particle.getPosition().getX() > size.getX()) {
			particle.getVelocity().setX(-particle.getVelocity().getX());
		}
		if (particle.getPosition().getY() < 0 || particle.getPosition().getY() > size.getY()) {
			particle.getVelocity().setY(-particle.getVelocity().getY());
		}
		if (particle.getPosition().getZ() < 0 || particle.getPosition().getZ() > size.getZ()) {
			particle.getVelocity().setZ(-particle.getVelocity().getZ());
		}
	}
	
	/**
	 * This runs the whole simulation
	 * @param deltaTime The amount of time to advance the simulation each step
	 */
	public void run(double deltaTime) {
		ParticleVisualizer viz = new ParticleVisualizer(this, deltaTime);
		
		JFrame frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(viz);
		frame.setSize(viz.getWidth(), viz.getHeight());

		frame.setVisible(true);		
	}
}
